input:
    input.go: |
        package execution

        // goverter:converter
        type Converter interface {
            // goverter:default NewStringP
            One(source string) *string

            // goverter:default NewStringP
            Two(source *string) *string

            // goverter:default NewString
            // goverter:useZeroValueOnPointerInconsistency
            Three(source *string) string
        }
        func NewStringP() *string { return nil }
        func NewString() string { return "" }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/jmattheis/goverter/execution"

        type ConverterImpl struct{}

        var Converter = ConverterImpl{}

        func (c *ConverterImpl) One(source string) *string {
        	pString := source
        	return &pString
        }
        func (c *ConverterImpl) Three(source *string) string {
        	xstring := execution.NewString()
        	if source != nil {
        		xstring = *source
        	}
        	return xstring
        }
        func (c *ConverterImpl) Two(source *string) *string {
        	pString := execution.NewStringP()
        	if source != nil {
        		xstring := *source
        		pString = &xstring
        	}
        	return pString
        }

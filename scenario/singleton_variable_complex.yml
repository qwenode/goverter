input:
    input.go: |
        package singleton

        // goverter:converter
        type UserConverterImpl interface {
            ConvertUser(source User) UserDTO
        }

        // goverter:converter
        type ProductConverter interface {
            ConvertProduct(source Product) ProductDTO
        }

        type User struct {
            Name string
        }

        type UserDTO struct {
            Name string
        }

        type Product struct {
            Title string
        }

        type ProductDTO struct {
            Title string
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/jmattheis/goverter/execution"

        type ProductConverterImpl struct{}

        var ProductConverterConvert = ProductConverterImpl{}

        func (c *ProductConverterImpl) ConvertProduct(source execution.Product) execution.ProductDTO {
        	var singletonProductDTO execution.ProductDTO
        	singletonProductDTO.Title = source.Title
        	return singletonProductDTO
        }

        type UserConverterImplImpl struct{}

        var UserConverterImplConvert = UserConverterImplImpl{}

        func (c *UserConverterImplImpl) ConvertUser(source execution.User) execution.UserDTO {
        	var singletonUserDTO execution.UserDTO
        	singletonUserDTO.Name = source.Name
        	return singletonUserDTO
        }

input:
    input.go: |
        package slices

        // goverter:converter
        type Converter interface {
            ConvertToP(source []int) []*int
            ConvertPToP(source []*int) []*int
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        type ConverterImpl struct{}

        var ConverterConvert = ConverterImpl{}

        func (c *ConverterImpl) ConvertPToP(source []*int) []*int {
        	var pIntList []*int
        	if source != nil {
        		pIntList = make([]*int, len(source))
        		for i := 0; i < len(source); i++ {
        			if source[i] != nil {
        				xint := *source[i]
        				pIntList[i] = &xint
        			}
        		}
        	}
        	return pIntList
        }
        func (c *ConverterImpl) ConvertToP(source []int) []*int {
        	var pIntList []*int
        	if source != nil {
        		pIntList = make([]*int, len(source))
        		for i := 0; i < len(source); i++ {
        			pInt := source[i]
        			pIntList[i] = &pInt
        		}
        	}
        	return pIntList
        }

input:
    input.go: |
        package structs

        // goverter:converter
        type Converter interface {
            ConvertHouse(source Input) Output
        }

        type Input struct {
            House *struct {
                Inner *struct {
                    Name string
                }
            }
        }

        type Output struct {
            House *struct {
                Inner *struct {
                    Name string
                }
            }
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/jmattheis/goverter/execution"

        type ConverterImpl struct{}

        var Converter = ConverterImpl{}

        func (c *ConverterImpl) ConvertHouse(source execution.Input) execution.Output {
        	var structsOutput execution.Output
        	if source.House != nil {
        		var unnamed struct {
        			Inner *struct {
        				Name string
        			}
        		}
        		if (*source.House).Inner != nil {
        			var unnamed2 struct {
        				Name string
        			}
        			unnamed2.Name = (*(*source.House).Inner).Name
        			unnamed.Inner = &unnamed2
        		}
        		structsOutput.House = &unnamed
        	}
        	return structsOutput
        }

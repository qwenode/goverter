input:
    generated/satisfies_interface.go: |
        package generated

        import execution "github.com/jmattheis/goverter/execution"

        var _ execution.Converter = (*ConverterImpl)(nil)
    input.go: |
        package chans

        // goverter:converter
        // goverter:skipCopySameType
        type Converter interface {
            A(chan int) chan int
            B(<-chan int) <-chan int
            C(chan<- int) chan<- int
            D(chan<- <-chan int) chan<- <-chan int
            E(<-chan <-chan int) <-chan <-chan int
            F(chan chan int) chan chan int
            G(chan (<-chan int)) chan (<-chan int)
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        type ConverterImpl struct{}

        var Converter = ConverterImpl{}

        func (c *ConverterImpl) A(source chan int) chan int {
        	return source
        }
        func (c *ConverterImpl) B(source <-chan int) <-chan int {
        	return source
        }
        func (c *ConverterImpl) C(source chan<- int) chan<- int {
        	return source
        }
        func (c *ConverterImpl) D(source chan<- <-chan int) chan<- <-chan int {
        	return source
        }
        func (c *ConverterImpl) E(source <-chan <-chan int) <-chan <-chan int {
        	return source
        }
        func (c *ConverterImpl) F(source chan chan int) chan chan int {
        	return source
        }
        func (c *ConverterImpl) G(source chan (<-chan int)) chan (<-chan int) {
        	return source
        }

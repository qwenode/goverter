input:
    input.go: |
        package skip

        // goverter:converter
        type UsesGlobal interface {
            Enabled(*string) *string
        }

        // goverter:converter
        // goverter:skipCopySameType yes
        type KeepsGlobalValue interface {
            Enabled(*string) *string
        }


        // goverter:converter
        // goverter:skipCopySameType no
        type DisablesGlobal interface {
            Disabled(*int) *int
        }

        // goverter:converter
        // goverter:skipCopySameType no
        type EnableInSubMethod interface {
            Disable(*string) *string
            // goverter:skipCopySameType
            Enabled(*int) *int
        }

        // goverter:converter
        type DisableInSubMethod interface {
            Enabled(*string) *string
            // goverter:skipCopySameType no
            Disable(*int) *int
        }
global:
    - skipCopySameType yes
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        type DisableInSubMethodImpl struct{}

        var DisableInSubMethod = DisableInSubMethodImpl{}

        func (c *DisableInSubMethodImpl) Disable(source *int) *int {
        	var pInt *int
        	if source != nil {
        		xint := *source
        		pInt = &xint
        	}
        	return pInt
        }
        func (c *DisableInSubMethodImpl) Enabled(source *string) *string {
        	return source
        }

        type DisablesGlobalImpl struct{}

        var DisablesGlobal = DisablesGlobalImpl{}

        func (c *DisablesGlobalImpl) Disabled(source *int) *int {
        	var pInt *int
        	if source != nil {
        		xint := *source
        		pInt = &xint
        	}
        	return pInt
        }

        type EnableInSubMethodImpl struct{}

        var EnableInSubMethod = EnableInSubMethodImpl{}

        func (c *EnableInSubMethodImpl) Disable(source *string) *string {
        	var pString *string
        	if source != nil {
        		xstring := *source
        		pString = &xstring
        	}
        	return pString
        }
        func (c *EnableInSubMethodImpl) Enabled(source *int) *int {
        	return source
        }

        type KeepsGlobalValueImpl struct{}

        var KeepsGlobalValue = KeepsGlobalValueImpl{}

        func (c *KeepsGlobalValueImpl) Enabled(source *string) *string {
        	return source
        }

        type UsesGlobalImpl struct{}

        var UsesGlobal = UsesGlobalImpl{}

        func (c *UsesGlobalImpl) Enabled(source *string) *string {
        	return source
        }

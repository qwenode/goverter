input:
    input.go: |
        package slices

        // goverter:converter
        // goverter:extend ZeroConvert EmptyConverter
        type Converter interface {
            Convert(source []Input) ([]Output, error)
        }

        func ZeroConvert(*int) (int, error) {
            return 0, nil
        }
        func EmptyConverter(Converter, *string) string {
            return ""
        }

        type Input struct {
            Nested InputNested
        }
        type Output struct {
            Nested OutputNested
        }
        type InputNested struct {
            Name *string
            Age *int
        }
        type OutputNested struct {
            Name string
            Age int
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/jmattheis/goverter/execution"

        type ConverterImpl struct{}

        var Converter = ConverterImpl{}

        func (c *ConverterImpl) Convert(source []execution.Input) ([]execution.Output, error) {
        	var slicesOutputList []execution.Output
        	if source != nil {
        		slicesOutputList = make([]execution.Output, len(source))
        		for i := 0; i < len(source); i++ {
        			slicesOutput, err := c.slicesInputToSlicesOutput(source[i])
        			if err != nil {
        				return nil, err
        			}
        			slicesOutputList[i] = slicesOutput
        		}
        	}
        	return slicesOutputList, nil
        }
        func (c *ConverterImpl) slicesInputNestedToSlicesOutputNested(source execution.InputNested) (execution.OutputNested, error) {
        	var slicesOutputNested execution.OutputNested
        	slicesOutputNested.Name = execution.EmptyConverter(c, source.Name)
        	xint, err := execution.ZeroConvert(source.Age)
        	if err != nil {
        		return slicesOutputNested, err
        	}
        	slicesOutputNested.Age = xint
        	return slicesOutputNested, nil
        }
        func (c *ConverterImpl) slicesInputToSlicesOutput(source execution.Input) (execution.Output, error) {
        	var slicesOutput execution.Output
        	slicesOutputNested, err := c.slicesInputNestedToSlicesOutputNested(source.Nested)
        	if err != nil {
        		return slicesOutput, err
        	}
        	slicesOutput.Nested = slicesOutputNested
        	return slicesOutput, nil
        }

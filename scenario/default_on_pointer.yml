input:
    input.go: |
        package execution

        // goverter:converter
        type Default interface {
            // goverter:default NewOutputWithDefaults
            Convert(source *Input) (*Output, error)
        }

        // goverter:converter
        type Update interface {
            // goverter:default NewOutputWithDefaults
            // goverter:default:update
            Update(source *Input) (*Output, error)
        }
        type Input struct {  Name string }
        type Output struct { Name string }

        func NewOutputWithDefaults() *Output {
            return &Output{ Name: "string" }
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/jmattheis/goverter/execution"

        type DefaultImpl struct{}

        var Default = DefaultImpl{}

        func (c *DefaultImpl) Convert(source *execution.Input) (*execution.Output, error) {
        	pExecutionOutput := execution.NewOutputWithDefaults()
        	if source != nil {
        		var executionOutput execution.Output
        		executionOutput.Name = (*source).Name
        		pExecutionOutput = &executionOutput
        	}
        	return pExecutionOutput, nil
        }

        type UpdateImpl struct{}

        var Update = UpdateImpl{}

        func (c *UpdateImpl) Update(source *execution.Input) (*execution.Output, error) {
        	pExecutionOutput := execution.NewOutputWithDefaults()
        	if source != nil {
        		(*pExecutionOutput).Name = (*source).Name
        	}
        	return pExecutionOutput, nil
        }

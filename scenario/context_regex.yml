input:
    input.go: |
        package example

        // goverter:converter
        // goverter:arg:context:regex test
        // goverter:extend DoLookup
        type Converter interface {
            Convert(source []string, test map[string]Output) []Output
        }

        func DoLookup(id string, test map[string]Output) Output {
            return test[id]
        }

        type Output struct {
            Name string
            Age int
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/jmattheis/goverter/execution"

        type ConverterImpl struct{}

        var Converter = ConverterImpl{}

        func (c *ConverterImpl) Convert(source []string, context map[string]execution.Output) []execution.Output {
        	var exampleOutputList []execution.Output
        	if source != nil {
        		exampleOutputList = make([]execution.Output, len(source))
        		for i := 0; i < len(source); i++ {
        			exampleOutputList[i] = execution.DoLookup(source[i], context)
        		}
        	}
        	return exampleOutputList
        }

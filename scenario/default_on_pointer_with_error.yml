input:
    input.go: |
        package execution

        // goverter:converter
        type Converter interface {
            // goverter:default NewOutput
            Convert(source *Input) (*Output, error)
        }

        // goverter:converter
        type Update interface {
            // goverter:default NewOutput
            // goverter:default:update
            Update(source *Input) (*Output, error)
        }

        type Input struct { ID int }
        type Output struct { ID int }
        func NewOutput() (*Output, error) {
            return &Output{}, nil
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/jmattheis/goverter/execution"

        type ConverterImpl struct{}

        var Converter = ConverterImpl{}

        func (c *ConverterImpl) Convert(source *execution.Input) (*execution.Output, error) {
        	pExecutionOutput, err := execution.NewOutput()
        	if err != nil {
        		return nil, err
        	}
        	if source != nil {
        		var executionOutput execution.Output
        		executionOutput.ID = (*source).ID
        		pExecutionOutput = &executionOutput
        	}
        	return pExecutionOutput, nil
        }

        type UpdateImpl struct{}

        var Update = UpdateImpl{}

        func (c *UpdateImpl) Update(source *execution.Input) (*execution.Output, error) {
        	pExecutionOutput, err := execution.NewOutput()
        	if err != nil {
        		return nil, err
        	}
        	if source != nil {
        		(*pExecutionOutput).ID = (*source).ID
        	}
        	return pExecutionOutput, nil
        }

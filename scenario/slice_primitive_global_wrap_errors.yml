input:
    input.go: |
        package slices

        // goverter:converter
        // goverter:extend strconv:Atoi
        type Converter interface {
            Convert(source []string) ([]int, error)
        }
global:
    - wrapErrors
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import (
        	"fmt"
        	"strconv"
        )

        type ConverterImpl struct{}

        var ConverterConvert = ConverterImpl{}

        func (c *ConverterImpl) Convert(source []string) ([]int, error) {
        	var intList []int
        	if source != nil {
        		intList = make([]int, len(source))
        		for i := 0; i < len(source); i++ {
        			xint, err := strconv.Atoi(source[i])
        			if err != nil {
        				return nil, fmt.Errorf("error setting index %d: %w", i, err)
        			}
        			intList[i] = xint
        		}
        	}
        	return intList, nil
        }

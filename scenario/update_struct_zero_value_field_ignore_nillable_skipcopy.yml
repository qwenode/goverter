input:
    input.go: |
        package structs

        import "io"

        // goverter:converter
        // goverter:skipCopySameType
        type IgnoreNil interface {
            // goverter:update target
            // goverter:update:ignoreZeroValueField:nillable
            // goverter:map P1
            // goverter:map P2
            // goverter:map P3
            // goverter:map P4
            // goverter:map P5
            Convert(source Input, target *Output)
        }

        type Input struct {
            A string

            P1 chan string
            P2 io.Reader
            P3 map[string]string
            P4 []string
            P5 *string
        }
        type Output struct {
            A string

            P1 chan string
            P2 io.Reader
            P3 map[string]string
            P4 []string
            P5 *string
        }

        func Identity[T any](t T) T {
            return t
        }

        type ID string
        type Nested struct {
            Name string
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/jmattheis/goverter/execution"

        type IgnoreNilImpl struct{}

        var IgnoreNil = IgnoreNilImpl{}

        func (c *IgnoreNilImpl) Convert(source execution.Input, target *execution.Output) {
        	target.A = source.A
        	if source.P1 != nil {
        		target.P1 = source.P1
        	}
        	if source.P2 != nil {
        		target.P2 = source.P2
        	}
        	if source.P3 != nil {
        		target.P3 = source.P3
        	}
        	if source.P4 != nil {
        		target.P4 = source.P4
        	}
        	if source.P5 != nil {
        		target.P5 = source.P5
        	}
        }

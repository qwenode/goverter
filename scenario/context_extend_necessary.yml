input:
    input.go: |
        package example

        // goverter:converter
        // goverter:extend LookupInt
        // goverter:extend LookupBool
        type Converter interface {
            // goverter:context ctxInt
            // goverter:context ctxBool
            Convert(source []Input, ctxInt map[string]int, ctxBool map[string]bool) []Output
        }

        // goverter:context ctx
        func LookupBool(id string, ctx map[string]bool) bool {
            return ctx[id]
        }

        // goverter:context ctx
        func LookupInt(id string, ctx map[string]int) int {
            return ctx[id]
        }

        type Input struct {
            One InputWrap
            Two InputWrap
        }
        type InputWrap struct {
            Value string
        }

        type Output struct {
            One OutputOne
            Two OutputTwo
        }

        type OutputOne struct {
            Value bool
        }
        type OutputTwo struct {
            Value int
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/jmattheis/goverter/execution"

        type ConverterImpl struct{}

        var Converter = ConverterImpl{}

        func (c *ConverterImpl) Convert(source []execution.Input, context map[string]int, context2 map[string]bool) []execution.Output {
        	var exampleOutputList []execution.Output
        	if source != nil {
        		exampleOutputList = make([]execution.Output, len(source))
        		for i := 0; i < len(source); i++ {
        			exampleOutputList[i] = c.exampleInputToExampleOutput(source[i], context2, context)
        		}
        	}
        	return exampleOutputList
        }
        func (c *ConverterImpl) exampleInputToExampleOutput(source execution.Input, context map[string]bool, context2 map[string]int) execution.Output {
        	var exampleOutput execution.Output
        	exampleOutput.One = c.exampleInputWrapToExampleOutputOne(source.One, context)
        	exampleOutput.Two = c.exampleInputWrapToExampleOutputTwo(source.Two, context2)
        	return exampleOutput
        }
        func (c *ConverterImpl) exampleInputWrapToExampleOutputOne(source execution.InputWrap, context map[string]bool) execution.OutputOne {
        	var exampleOutputOne execution.OutputOne
        	exampleOutputOne.Value = execution.LookupBool(source.Value, context)
        	return exampleOutputOne
        }
        func (c *ConverterImpl) exampleInputWrapToExampleOutputTwo(source execution.InputWrap, context map[string]int) execution.OutputTwo {
        	var exampleOutputTwo execution.OutputTwo
        	exampleOutputTwo.Value = execution.LookupInt(source.Value, context)
        	return exampleOutputTwo
        }

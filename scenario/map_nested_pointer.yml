input:
    input.go: |
        package structs

        // goverter:converter
        type Converter interface {
            // goverter:map Nested.Name Name
            Convert(source Input) Output
        }

        type Input struct {
            Nested *InputNested
        }
        type InputNested struct {
            Name *string
        }
        type Output struct {
            Name *string
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/jmattheis/goverter/execution"

        type ConverterImpl struct{}

        var Converter = ConverterImpl{}

        func (c *ConverterImpl) Convert(source execution.Input) execution.Output {
        	var structsOutput execution.Output
        	var pString *string
        	if source.Nested != nil {
        		pString = source.Nested.Name
        	}
        	if pString != nil {
        		xstring := *pString
        		structsOutput.Name = &xstring
        	}
        	return structsOutput
        }

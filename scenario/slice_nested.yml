input:
    input.go: |
        package slices

        // goverter:converter
        type Converter interface {
            Convert(source [][][]int) [][][]int
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        type ConverterImpl struct{}

        var Converter = ConverterImpl{}

        func (c *ConverterImpl) Convert(source [][][]int) [][][]int {
        	var intListListList [][][]int
        	if source != nil {
        		intListListList = make([][][]int, len(source))
        		for i := 0; i < len(source); i++ {
        			if source[i] != nil {
        				intListListList[i] = make([][]int, len(source[i]))
        				for j := 0; j < len(source[i]); j++ {
        					if source[i][j] != nil {
        						intListListList[i][j] = make([]int, len(source[i][j]))
        						for k := 0; k < len(source[i][j]); k++ {
        							intListListList[i][j][k] = source[i][j][k]
        						}
        					}
        				}
        			}
        		}
        	}
        	return intListListList
        }

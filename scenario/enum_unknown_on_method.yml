input:
    input.go: |
        package example

        import (
            input "github.com/jmattheis/goverter/execution/input"
            output "github.com/jmattheis/goverter/execution/output"
        )

        // goverter:converter
        type Converter interface {
            // goverter:enum:unknown Unknown
            Convert(input.Color) output.Color
        }
    input/enum.go: |
        package input

        type Color int

        const (
            Green Color = iota
            Blue
        )
    output/enum.go: |
        package output

        type Color string
        const (
            Unknown Color = "unknown"
            Green   Color = "green"
            Blue    Color = "blue"
        )
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import (
        	input "github.com/jmattheis/goverter/execution/input"
        	output "github.com/jmattheis/goverter/execution/output"
        )

        type ConverterImpl struct{}

        var Converter = ConverterImpl{}

        func (c *ConverterImpl) Convert(source input.Color) output.Color {
        	var outputColor output.Color
        	switch source {
        	case input.Blue:
        		outputColor = output.Blue
        	case input.Green:
        		outputColor = output.Green
        	default:
        		outputColor = output.Unknown
        	}
        	return outputColor
        }

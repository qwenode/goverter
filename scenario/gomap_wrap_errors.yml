input:
    input.go: |
        package structs

        type Enum1 int
        type Enum2 string

        // goverter:converter
        // goverter:extend strconv:Atoi
        // goverter:wrapErrors
        type Converter interface {
            Convert(map[string]string) (map[string]int, error)
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import "strconv"

        type ConverterImpl struct{}

        var Converter = ConverterImpl{}

        func (c *ConverterImpl) Convert(source map[string]string) (map[string]int, error) {
        	var mapStringInt map[string]int
        	if source != nil {
        		mapStringInt = make(map[string]int, len(source))
        		for key, value := range source {
        			xint, err := strconv.Atoi(value)
        			if err != nil {
        				return nil, err
        			}
        			mapStringInt[key] = xint
        		}
        	}
        	return mapStringInt, nil
        }

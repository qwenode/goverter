input:
    input.go: |
        package structs

        // goverter:converter
        type Converter interface {
            // goverter:update target
            // goverter:update:ignoreZeroValueField:struct
            // goverter:map N | CustomStruct
            Convert(source StructInput, target *StructOutput)
        }

        // goverter:converter
        type Converter2 interface {
            // goverter:update target
            // goverter:update:ignoreZeroValueField:basic
            // goverter:map N | CustomString
            Convert(source StringInput, target *StringOutput)
        }

        func CustomStruct(StringInput) StringInput { return StringInput{} }
        func CustomString(string) string { return "world" }

        type StringInput struct { N string }
        type StringOutput struct { N string }

        type StructInput struct { N StringInput }
        type StructOutput struct { N StringInput }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/jmattheis/goverter/execution"

        type Converter2Impl struct{}

        var Converter2 = Converter2Impl{}

        func (c *Converter2Impl) Convert(source execution.StringInput, target *execution.StringOutput) {
        	if source.N != "" {
        		target.N = execution.CustomString(source.N)
        	}
        }

        type ConverterImpl struct{}

        var Converter = ConverterImpl{}

        func (c *ConverterImpl) Convert(source execution.StructInput, target *execution.StructOutput) {
        	if source.N != (execution.StringInput{}) {
        		target.N = execution.CustomStruct(source.N)
        	}
        }

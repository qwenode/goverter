input:
    input.go: |
        package slices

        // goverter:converter
        type Converter interface {
            Convert(source map[string]map[uint]map[bool]string) map[string]map[uint]map[bool]string
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        type ConverterImpl struct{}

        var Converter = ConverterImpl{}

        func (c *ConverterImpl) Convert(source map[string]map[uint]map[bool]string) map[string]map[uint]map[bool]string {
        	var mapStringMapUintMapBoolString map[string]map[uint]map[bool]string
        	if source != nil {
        		mapStringMapUintMapBoolString = make(map[string]map[uint]map[bool]string, len(source))
        		for key, value := range source {
        			var mapUintMapBoolString map[uint]map[bool]string
        			if value != nil {
        				mapUintMapBoolString = make(map[uint]map[bool]string, len(value))
        				for key2, value2 := range value {
        					var mapBoolString map[bool]string
        					if value2 != nil {
        						mapBoolString = make(map[bool]string, len(value2))
        						for key3, value3 := range value2 {
        							mapBoolString[key3] = value3
        						}
        					}
        					mapUintMapBoolString[key2] = mapBoolString
        				}
        			}
        			mapStringMapUintMapBoolString[key] = mapUintMapBoolString
        		}
        	}
        	return mapStringMapUintMapBoolString
        }

input:
    input.go: |
        package slices

        // goverter:converter
        type Converter interface {
            Convert(source map[string]int) map[string]*int
            Convert2(source map[string]*int) map[string]*int
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        type ConverterImpl struct{}

        var ConverterConvert = ConverterImpl{}

        func (c *ConverterImpl) Convert(source map[string]int) map[string]*int {
        	var mapStringPInt map[string]*int
        	if source != nil {
        		mapStringPInt = make(map[string]*int, len(source))
        		for key, value := range source {
        			pInt := value
        			mapStringPInt[key] = &pInt
        		}
        	}
        	return mapStringPInt
        }
        func (c *ConverterImpl) Convert2(source map[string]*int) map[string]*int {
        	var mapStringPInt map[string]*int
        	if source != nil {
        		mapStringPInt = make(map[string]*int, len(source))
        		for key, value := range source {
        			var pInt *int
        			if value != nil {
        				xint := *value
        				pInt = &xint
        			}
        			mapStringPInt[key] = pInt
        		}
        	}
        	return mapStringPInt
        }
